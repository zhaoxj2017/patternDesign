package com.structural.proxy;

/**
 * 代理模式 (1..1)
 *    为其它对象提供一层代理对象，去访问该类的功能。
 * 特征：
 *    一个对象的调用需要委托另外一个对象
 * 优点：1、职责清晰 2、拓展性好 3、访问控制
 * 缺点：1、代理增加中间层的开销，有可能影响性能。
 *
 * 应用场景：
 *    1、原有的接口功能职责单一，直接访问某些功能时会出现很多麻烦，调用需要预处理，例如：安全性，调用其它接口；
 *    2、远程、虚拟、Copy-on-Write、Cache、防火墙等代码
 *注意事项：
 *    1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。
 *    2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。
 */
public class Client {
    public static void main(String[] args) {
        Image image = new ProxyImage("mine.png");
        image.display();
    }
}
